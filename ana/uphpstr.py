import uproot
import matplotlib.pyplot as plt
import numpy as np

class hpstrHistFile :
    """A file of histograms generated by hpstr
    
    hpstr produces a file of histograms with a formulaic structure.
    
    Parmaeters
    ----------
    fp : str
        File path to hist file
    analysis : str
        Name of analysis in hist file (name given to HistoManager)
    copies : list[str]
        list of copie names (as given to HistoManager)
    """
    
    def __init__(self, fp, analysis, copies = []) :
        self.__analysis_dir = uproot.open(f'{fp}:{analysis}')
        self.__analysis = analysis
        self.__copies = copies
    
    def __construct_key(self,hist_name,*,selection = None, include_prefix=True) :
        """Get a histogram from this analysis
        
        Parameters
        ----------
        hist_name : str
            Name of histogram including dimensionality extension
        selection : str, int
            Name (or index) of selection ("copies" created by HistoManager)
        include_prefix : bool
            Include the analysis name prefix defined by HistoManager
        """
        key = []
        if include_prefix :
            key.append(self.__analysis)
        if selection is not None :
            if isinstance(selection,int) :
                key.append(self.__copies[selection])
            else :
                key.append(selection)
            key.append('follow')
        key.append(hist_name)
        return '_'.join(key)
            
    def get(self,*args,**kwargs) :
        """Get a histogram from this analysis
        
        All args and kwargs are forwarded to __construct_key
        """
        k = self.__construct_key(*args,**kwargs)
        return self.__analysis_dir[k]
    
    def __deduce_selections(self,selections) :
        if len(self.__copies) == 0 :
            return [None]
        elif selections is True :
            return self.__copies
        else :
            return self.__copies[selections]

    def plot_bar(self,hist_name, ylabel, *,
                 ticks_rotation = 15, out_dir = None, file_prefix = '',
                 include_prefix = False, ax = None, title = None) :
        if ax is None :
            fig, ax = plt.subplots()

        h = self.get(hist_name, include_prefix = include_prefix)
        values = h.values()
        labels = [l for l in h.axis('x').member('fLabels')]

        if len(values) > len(labels) :
            labels.extend(['' for i in range(len(values)-len(labels))])

        plt.bar(labels, values)
        plt.xticks(rotation = ticks_rotation)
        plt.yscale('log')
        plt.ylabel(ylabel)
        if title is not None :
            plt.title(title)

        if out_dir is None :
            plt.show()
        else :
            plt.savefig(f'{out_dir}/{file_prefix}{hist_name}')
    
    def plot_1d(self,hist_name, xlabel, *, 
                out_dir = None, file_prefix = '',
                ax = None, selections = None, title = None) :
        if ax is None :
            fig, ax = plt.subplots()
        if isinstance(hist_name,dict) :
            # plotting multiple histograms 
            #  instead of following one through selections
            for name, hist in hist_name.items() :
                if not hist.endswith('_h') :
                    hist += '_h'
                self.get(hist).to_hist().plot(ax=ax,label=name)
        else :
            if not hist_name.endswith('_h') :
                hist_name += '_h'
            if selections is not None :
                # follow single histogram through the event selections
                for name in self.__deduce_selections(selections) :
                    self.get(hist_name, selection = name).to_hist().plot(ax=ax,label=name)
            else :
                # just plot the single histogram
                self.get(hist_name).to_hist().plot(ax=ax,label=hist_name)
        plt.legend()
        plt.ylabel('Event Count')
        plt.yscale('log')
        plt.xlabel(xlabel)
        if title is not None :
            plt.title(title)

        if out_dir is None :
            plt.show()
        else :
            plt.savefig(f'{out_dir}/{file_prefix}{hist_name}')
        
    def plot_2d(self,hist_name, xlabel, ylabel, *, 
                out_dir = None, file_prefix = '',
                selections = None, size = None, title = None) :
        if isinstance(hist_name,dict) :
            fig, axl = plt.subplots(nrows=len(hist_name))
            for ax, (name, hist) in zip(axl,hist_name.items()) :
                if not hist.endswith('_hh') :
                    hist += '_hh'
                self.get(hist).to_hist().plot(ax=ax, cmin=1)
                ax.set_xlabel(xlabel)
                ax.set_ylabel(ylabel)
                ax.set_title(name)
            fig.tight_layout()
        elif selections is not None :
            sels = self.__deduce_selections(selections)
            fig, axl = plt.subplots(nrows=len(sels))
            if size is not None :
                fig.set_size_inches(*size)
            if not hist_name.endswith('_hh') :
                hist_name += '_hh'
            for name, ax in zip(sels,axl) :
                self.get(hist_name,selection=name).to_hist().plot(ax=ax, cmin=1)
                ax.set_xlabel(xlabel)
                ax.set_ylabel(ylabel)
                ax.set_title(name)
            fig.tight_layout()
        else :
            fig, ax = plt.subplots()
            if size is not None :
                fig.set_size_inches(*size)
            self.get(hist_name).to_hist().plot(ax=ax, cmin=1)
            ax.set_xlabel(xlabel)
            ax.set_ylabel(ylabel)
        if title is not None :
            plt.suptitle(title, y = 1.01)
        
        if out_dir is None :
            plt.show()
        else :
            plt.savefig(f'{out_dir}/{file_prefix}{hist_name}')
